{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\n\nvar _dec, _class, _class2, _temp;\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport Layout from '../components/Layout';\nimport { findData } from '../utils/sample-api';\nimport ListDetail from '../components/ListDetail';\nimport { inject, observer } from 'mobx-react';\nlet InitialPropsDetail = (_dec = inject('userStore'), _dec(_class = observer(_class = (_temp = _class2 = class InitialPropsDetail extends React.Component {\n  render() {\n    const {\n      item,\n      errors\n    } = this.props;\n\n    if (errors) {\n      return __jsx(Layout, {\n        title: `Error | Next.js + TypeScript Example`\n      }, __jsx(\"p\", null, __jsx(\"span\", {\n        style: {\n          color: 'red'\n        }\n      }, \"Error:\"), \" \", errors));\n    }\n\n    return __jsx(Layout, {\n      title: `${item ? item.name : 'Detail'} | Next.js + TypeScript Example`\n    }, item && __jsx(ListDetail, {\n      item: item\n    }), __jsx(\"p\", null, \"Name: \", this.props.userStore.name), __jsx(\"button\", {\n      onClick: () => {\n        this.props.userStore.setName('set by client');\n      }\n    }, \"click to set name\"));\n  }\n\n}, _class2.getInitialProps = async ({\n  query,\n  mobxStore\n}) => {\n  mobxStore.userStore.setName('set by server');\n\n  try {\n    const {\n      id\n    } = query;\n    const item = await findData(_Array$isArray(id) ? id[0] : id);\n    return {\n      item\n    };\n  } catch (err) {\n    return {\n      errors: err.message\n    };\n  }\n}, _temp)) || _class) || _class);\nexport default InitialPropsDetail;","map":null,"metadata":{},"sourceType":"module"}